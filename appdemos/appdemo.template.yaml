apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: |-
      An example Ruby application with a MySQL database.
    iconClass: icon-ruby
    openshift.io/display-name: Ruby + MySQL
    openshift.io/long-description: An example Ruby application with a MySQL database.
    tags: quickstart,ruby,mysql,appdemo
    template.openshift.io/bindable: "false"
  name: appdemo
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: dbsecret
  stringData:
    mysql-password: ${MYSQL_PASSWORD}
    mysql-user: ${MYSQL_USER}
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app.kubernetes.io/part-of: vote-app
      app.kubernetes.io/name: python
      app.openshift.io/runtime-version: '2.7'
      app: ruby-helloworld-sample
      template: application-template-stibuild
    name: origin-ruby-sample
  spec:
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: origin-ruby-sample:latest
      generation: null
      importPolicy: {}
      name: latest
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/image.dockerRepositoryCheck: 2017-04-05T07:17:56Z
    creationTimestamp: null
    generation: 2
    labels:
      app.kubernetes.io/part-of: vote-app
      app: ruby-helloworld-sample
      template: application-template-stibuild
    name: ruby-22-centos7
  spec:
    dockerImageRepository: centos/ruby-22-centos7
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: centos/ruby-22-centos7:latest
      generation: 2
      importPolicy: {}
      name: latest
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/part-of: vote-app
      app: ruby-helloworld-sample
      name: ruby-sample-build
      template: application-template-stibuild
    name: ruby-sample-build
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: origin-ruby-sample:latest
#    postCommit:
#      args:
#      - bundle
#      - exec
#      - rake
#      - test
    resources:
      requests:
        cpu: 50m
        memory: 100Mi
    runPolicy: Serial
    source:
      git:
        uri: ${GIT_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: EXAMPLE
          value: sample-app
        from:
          kind: ImageStreamTag
          name: ruby-22-centos7:latest
      type: Source
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        allowEnv: true
        secret: secret101
      type: Generic
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/part-of: vote-app
      app: ruby-helloworld-sample
      template: application-template-stibuild
    name: database
  spec:
    ports:
    - name: db
      port: 5434
      protocol: TCP
      targetPort: 3306
    selector:
      name: database
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"database","namespace":"","kind":"Service"}]'
    creationTimestamp: null
    labels:
      app.kubernetes.io/part-of: vote-app
      app: ruby-helloworld-sample
      template: application-template-stibuild
    name: frontend
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: frontend
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app.kubernetes.io/part-of: vote-app
      app: ruby-helloworld-sample
      template: application-template-stibuild
    name: database
  spec:
    replicas: 1
    selector:
      name: database
    strategy:
      recreateParams:
        mid:
          execNewPod:
            command:
            - /bin/true
            containerName: ruby-helloworld-database
            env:
            - name: CUSTOM_VAR2
              value: custom_value2
            volumes:
            - ruby-helloworld-data
          failurePolicy: Abort
        post:
          execNewPod:
            command:
            - /bin/true
            containerName: ruby-helloworld-database
            env:
            - name: CUSTOM_VAR2
              value: custom_value2
            volumes:
            - ruby-helloworld-data
          failurePolicy: Ignore
        timeoutSeconds: 600
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/part-of: vote-app
          name: database
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: mysql-user
                name: dbsecret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: dbsecret
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          image: centos/mysql-57-centos7:latest
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" /opt/rh/rh-mysql57/root/usr/bin/mysql
                -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          name: ruby-helloworld-database
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" /opt/rh/rh-mysql57/root/usr/bin/mysql
                -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ruby-helloworld-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: ruby-helloworld-data
    test: false
    triggers:
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    annotations: 
      app.kubernetes.io/connects-to: '["database"]'
    labels:
      app.kubernetes.io/part-of: vote-app
      app: ruby-helloworld-sample
      template: application-template-stibuild
    name: frontend
  spec:
    replicas: 2
    selector:
      name: frontend
    strategy:
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        post:
          execNewPod:
            command:
            - /bin/true
            containerName: ruby-helloworld
            env:
            - name: CUSTOM_VAR2
              value: custom_value2
          failurePolicy: Ignore
        timeoutSeconds: 120
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/part-of: vote-app
          name: frontend
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: mysql-user
                name: dbsecret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: dbsecret
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          image: origin-ruby-sample:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          name: ruby-helloworld
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ruby-helloworld
        from:
          kind: ImageStreamTag
          name: origin-ruby-sample:latest
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app.kubernetes.io/part-of: vote-app
      app: ruby-helloworld-sample
      template: application-template-stibuild
    name: frontend
  spec:
    port:
      targetPort: web
    to:
      kind: Service
      name: frontend
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-04-05T07:22:18Z
        status: "True"
        type: Admitted
      routerName: router
      wildcardPolicy: None
parameters:
- description: database username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: database password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: database name
  name: MYSQL_DATABASE
  required: true
  value: root
- description: Application code
  name: GIT_URL
  required: true
  value: https://github.com/sjbylo/ruby-hello-world.git
